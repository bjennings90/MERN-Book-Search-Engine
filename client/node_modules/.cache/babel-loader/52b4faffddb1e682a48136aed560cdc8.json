{"ast":null,"code":"import _toConsumableArray from \"/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, execute, getFieldDef } from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(_x) {\n  return _subscribe.apply(this, arguments);\n}\n\nfunction _subscribe() {\n  _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(args) {\n    var resultOrStream,\n        mapSourceToResponse,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Temporary for v15 to v16 migration. Remove in v17\n            _args.length < 2 || devAssert(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n            _context.next = 3;\n            return createSourceEventStream(args);\n\n          case 3:\n            resultOrStream = _context.sent;\n\n            if (isAsyncIterable(resultOrStream)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", resultOrStream);\n\n          case 6:\n            // For each payload yielded from a subscription, map it over the normal\n            // GraphQL `execute` function, with `payload` as the rootValue.\n            // This implements the \"MapSourceToResponseEvent\" algorithm described in\n            // the GraphQL specification. The `execute` function provides the\n            // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n            // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n            mapSourceToResponse = function mapSourceToResponse(payload) {\n              return execute(_objectSpread({}, args, {\n                rootValue: payload\n              }));\n            }; // Map every source value to a ExecutionResult value as described above.\n\n\n            return _context.abrupt(\"return\", mapAsyncIterator(resultOrStream, mapSourceToResponse));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _subscribe.apply(this, arguments);\n}\n\nfunction toNormalizedArgs(args) {\n  var firstArg = args[0];\n\n  if (firstArg && 'document' in firstArg) {\n    return firstArg;\n  }\n\n  return {\n    schema: firstArg,\n    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613\n    document: args[1],\n    rootValue: args[2],\n    contextValue: args[3],\n    variableValues: args[4],\n    operationName: args[5],\n    subscribeFieldResolver: args[6]\n  };\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream() {\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction _createSourceEventStream() {\n  _createSourceEventStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _len,\n        rawArgs,\n        _key,\n        args,\n        schema,\n        document,\n        variableValues,\n        exeContext,\n        eventStream,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            for (_len = _args2.length, rawArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n              rawArgs[_key] = _args2[_key];\n            }\n\n            args = toNormalizedArgs(rawArgs);\n            schema = args.schema, document = args.document, variableValues = args.variableValues; // If arguments are missing or incorrectly typed, this is an internal\n            // developer mistake which should throw an early error.\n\n            assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n            // a \"Response\" with only errors is returned.\n\n            exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n            if ('schema' in exeContext) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              errors: exeContext\n            });\n\n          case 7:\n            _context2.prev = 7;\n            _context2.next = 10;\n            return executeSubscription(exeContext);\n\n          case 10:\n            eventStream = _context2.sent;\n\n            if (isAsyncIterable(eventStream)) {\n              _context2.next = 13;\n              break;\n            }\n\n            throw new Error('Subscription field must return Async Iterable. ' + \"Received: \".concat(inspect(eventStream), \".\"));\n\n          case 13:\n            return _context2.abrupt(\"return\", eventStream);\n\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](7);\n\n            if (!(_context2.t0 instanceof GraphQLError)) {\n              _context2.next = 20;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              errors: [_context2.t0]\n            });\n\n          case 20:\n            throw _context2.t0;\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[7, 16]]);\n  }));\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction executeSubscription(_x2) {\n  return _executeSubscription.apply(this, arguments);\n}\n\nfunction _executeSubscription() {\n  _executeSubscription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(exeContext) {\n    var schema, fragments, operation, variableValues, rootValue, rootType, rootFields, _, responseName, fieldNodes, fieldDef, fieldName, path, info, _fieldDef$subscribe, args, contextValue, resolveFn, eventStream;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            schema = exeContext.schema, fragments = exeContext.fragments, operation = exeContext.operation, variableValues = exeContext.variableValues, rootValue = exeContext.rootValue;\n            rootType = schema.getSubscriptionType();\n\n            if (!(rootType == null)) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new GraphQLError('Schema is not configured to execute subscription operation.', {\n              nodes: operation\n            });\n\n          case 4:\n            rootFields = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n            _ = _slicedToArray(_toConsumableArray(rootFields.entries())[0], 2), responseName = _[0], fieldNodes = _[1];\n            fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n            if (fieldDef) {\n              _context3.next = 10;\n              break;\n            }\n\n            fieldName = fieldNodes[0].name.value;\n            throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), {\n              nodes: fieldNodes\n            });\n\n          case 10:\n            path = addPath(undefined, responseName, rootType.name);\n            info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n            _context3.prev = 12;\n            // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n            // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n            // Build a JS object of arguments from the field.arguments AST, using the\n            // variables scope to fulfill any variable references.\n            args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n            // is provided to every resolve function within an execution. It is commonly\n            // used to represent an authenticated user, or request-specific caches.\n\n            contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n            // AsyncIterable yielding raw payloads.\n\n            resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n            _context3.next = 18;\n            return resolveFn(rootValue, args, contextValue, info);\n\n          case 18:\n            eventStream = _context3.sent;\n\n            if (!(eventStream instanceof Error)) {\n              _context3.next = 21;\n              break;\n            }\n\n            throw eventStream;\n\n          case 21:\n            return _context3.abrupt(\"return\", eventStream);\n\n          case 24:\n            _context3.prev = 24;\n            _context3.t0 = _context3[\"catch\"](12);\n            throw locatedError(_context3.t0, fieldNodes, pathToArray(path));\n\n          case 27:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[12, 24]]);\n  }));\n  return _executeSubscription.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/node_modules/graphql/execution/subscribe.mjs"],"names":["devAssert","inspect","isAsyncIterable","addPath","pathToArray","GraphQLError","locatedError","collectFields","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","execute","getFieldDef","mapAsyncIterator","getArgumentValues","subscribe","args","length","createSourceEventStream","resultOrStream","mapSourceToResponse","payload","rootValue","toNormalizedArgs","firstArg","schema","document","contextValue","variableValues","operationName","subscribeFieldResolver","rawArgs","exeContext","errors","executeSubscription","eventStream","Error","fragments","operation","rootType","getSubscriptionType","nodes","rootFields","selectionSet","entries","responseName","fieldNodes","fieldDef","fieldName","name","value","path","undefined","info","resolveFn","_fieldDef$subscribe"],"mappings":"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","sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport {\n  assertValidExecutionArguments,\n  buildExecutionContext,\n  buildResolveInfo,\n  execute,\n  getFieldDef,\n} from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport async function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const resultOrStream = await createSourceEventStream(args);\n\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    execute({ ...args, rootValue: payload }); // Map every source value to a ExecutionResult value as described above.\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg && 'document' in firstArg) {\n    return firstArg;\n  }\n\n  return {\n    schema: firstArg,\n    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613\n    document: args[1],\n    rootValue: args[2],\n    contextValue: args[3],\n    variableValues: args[4],\n    operationName: args[5],\n    subscribeFieldResolver: args[6],\n  };\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport async function createSourceEventStream(...rawArgs) {\n  const args = toNormalizedArgs(rawArgs);\n  const { schema, document, variableValues } = args; // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${inspect(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}