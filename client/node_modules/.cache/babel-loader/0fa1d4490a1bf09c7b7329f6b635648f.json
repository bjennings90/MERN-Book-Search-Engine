{"ast":null,"code":"var _jsxFileName = \"/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/src/pages/SavedBooks.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { REMOVE_BOOK } from '../utils/mutation'; // import { getMe, deleteBook } from '../utils/API';\n\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useMutation, useLazyQuery } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n  const [getMe, {\n    error: meError\n  }] = useQuery(QUERY_ME); // use this to determine if `useEffect()` hook needs to run again\n\n  const userDataLength = Object.keys(userData).length;\n  const [removeBookMutation, {\n    error\n  }] = useMutation(REMOVE_BOOK);\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n\n        const response = await getMe();\n\n        if (!response.data) {\n          throw new Error('something went wrong!');\n        }\n\n        const {\n          user\n        } = await response.data.me;\n        setUserData(user);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    getUserData();\n  }, [userDataLength]); // create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n  const handleDeleteBook = async bookId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // const response = await deleteBook(bookId, token);\n      const response = await removeBookMutation({\n        variables: {\n          bookId\n        }\n      });\n      console.log(response);\n\n      if (!response.data) {\n        throw new Error('something went wrong!');\n      }\n\n      setUserData(response.data.removeBook.user); // upon success, remove book's id from localStorage\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  }; // if data isn't here yet, say so\n\n\n  if (!userDataLength) {\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 12\n      }\n    }, \"LOADING...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"Viewing saved books!\"))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.length ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:` : 'You have no saved books!'), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.map(book => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: book.bookId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, book.image ? /*#__PURE__*/React.createElement(Card.Img, {\n      src: book.image,\n      alt: `The cover for ${book.title}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 31\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    }, book.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }\n    }, \"Authors: \", book.authors), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }, book.description), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-block btn-danger\",\n      onClick: () => handleDeleteBook(book.bookId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 19\n      }\n    }, \"Delete this Book!\")));\n  }))));\n};\n\nexport default SavedBooks;","map":{"version":3,"sources":["/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/src/pages/SavedBooks.js"],"names":["React","useState","useEffect","Jumbotron","Container","CardColumns","Card","Button","REMOVE_BOOK","Auth","removeBookId","useMutation","useLazyQuery","QUERY_ME","SavedBooks","userData","setUserData","getMe","error","meError","useQuery","userDataLength","Object","keys","length","removeBookMutation","getUserData","token","loggedIn","getToken","response","data","Error","user","me","err","console","handleDeleteBook","bookId","variables","log","removeBook","savedBooks","map","book","image","title","authors","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { REMOVE_BOOK } from '../utils/mutation';\n// import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useMutation, useLazyQuery } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n  const [getMe, { error: meError }] = useQuery(QUERY_ME);\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n  const [removeBookMutation, { error }] = useMutation(REMOVE_BOOK)\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n\n        const response = await getMe();\n\n        if (!response.data) {\n          throw new Error('something went wrong!');\n        }\n\n        const {  user } = await response.data.me;\n        setUserData(user);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    getUserData();\n  }, [userDataLength]);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // const response = await deleteBook(bookId, token);\n      const response = await removeBookMutation({\n        variables: { bookId }\n      });\n      console.log(response)\n      if (!response.data) {\n        throw new Error('something went wrong!');\n      }\n\n\n      setUserData(response.data.removeBook.user);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n"]},"metadata":{},"sourceType":"module"}