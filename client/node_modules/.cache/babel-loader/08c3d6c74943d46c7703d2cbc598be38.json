{"ast":null,"code":"import _classCallCheck from \"/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport var Parser = /*#__PURE__*/function () {\n  function Parser(source) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Parser);\n\n    var sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  _createClass(Parser, [{\n    key: \"parseName\",\n    value: function parseName() {\n      var token = this.expectToken(TokenKind.NAME);\n      return this.node(token, {\n        kind: Kind.NAME,\n        value: token.value\n      });\n    } // Implements the parsing rules in the Document section.\n\n    /**\n     * Document : Definition+\n     */\n\n  }, {\n    key: \"parseDocument\",\n    value: function parseDocument() {\n      return this.node(this._lexer.token, {\n        kind: Kind.DOCUMENT,\n        definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF)\n      });\n    }\n    /**\n     * Definition :\n     *   - ExecutableDefinition\n     *   - TypeSystemDefinition\n     *   - TypeSystemExtension\n     *\n     * ExecutableDefinition :\n     *   - OperationDefinition\n     *   - FragmentDefinition\n     *\n     * TypeSystemDefinition :\n     *   - SchemaDefinition\n     *   - TypeDefinition\n     *   - DirectiveDefinition\n     *\n     * TypeDefinition :\n     *   - ScalarTypeDefinition\n     *   - ObjectTypeDefinition\n     *   - InterfaceTypeDefinition\n     *   - UnionTypeDefinition\n     *   - EnumTypeDefinition\n     *   - InputObjectTypeDefinition\n     */\n\n  }, {\n    key: \"parseDefinition\",\n    value: function parseDefinition() {\n      if (this.peek(TokenKind.BRACE_L)) {\n        return this.parseOperationDefinition();\n      } // Many definitions begin with a description and require a lookahead.\n\n\n      var hasDescription = this.peekDescription();\n      var keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;\n\n      if (keywordToken.kind === TokenKind.NAME) {\n        switch (keywordToken.value) {\n          case 'schema':\n            return this.parseSchemaDefinition();\n\n          case 'scalar':\n            return this.parseScalarTypeDefinition();\n\n          case 'type':\n            return this.parseObjectTypeDefinition();\n\n          case 'interface':\n            return this.parseInterfaceTypeDefinition();\n\n          case 'union':\n            return this.parseUnionTypeDefinition();\n\n          case 'enum':\n            return this.parseEnumTypeDefinition();\n\n          case 'input':\n            return this.parseInputObjectTypeDefinition();\n\n          case 'directive':\n            return this.parseDirectiveDefinition();\n        }\n\n        if (hasDescription) {\n          throw syntaxError(this._lexer.source, this._lexer.token.start, 'Unexpected description, descriptions are supported only on type definitions.');\n        }\n\n        switch (keywordToken.value) {\n          case 'query':\n          case 'mutation':\n          case 'subscription':\n            return this.parseOperationDefinition();\n\n          case 'fragment':\n            return this.parseFragmentDefinition();\n\n          case 'extend':\n            return this.parseTypeSystemExtension();\n        }\n      }\n\n      throw this.unexpected(keywordToken);\n    } // Implements the parsing rules in the Operations section.\n\n    /**\n     * OperationDefinition :\n     *  - SelectionSet\n     *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n     */\n\n  }, {\n    key: \"parseOperationDefinition\",\n    value: function parseOperationDefinition() {\n      var start = this._lexer.token;\n\n      if (this.peek(TokenKind.BRACE_L)) {\n        return this.node(start, {\n          kind: Kind.OPERATION_DEFINITION,\n          operation: OperationTypeNode.QUERY,\n          name: undefined,\n          variableDefinitions: [],\n          directives: [],\n          selectionSet: this.parseSelectionSet()\n        });\n      }\n\n      var operation = this.parseOperationType();\n      var name;\n\n      if (this.peek(TokenKind.NAME)) {\n        name = this.parseName();\n      }\n\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: operation,\n        name: name,\n        variableDefinitions: this.parseVariableDefinitions(),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    /**\n     * OperationType : one of query mutation subscription\n     */\n\n  }, {\n    key: \"parseOperationType\",\n    value: function parseOperationType() {\n      var operationToken = this.expectToken(TokenKind.NAME);\n\n      switch (operationToken.value) {\n        case 'query':\n          return OperationTypeNode.QUERY;\n\n        case 'mutation':\n          return OperationTypeNode.MUTATION;\n\n        case 'subscription':\n          return OperationTypeNode.SUBSCRIPTION;\n      }\n\n      throw this.unexpected(operationToken);\n    }\n    /**\n     * VariableDefinitions : ( VariableDefinition+ )\n     */\n\n  }, {\n    key: \"parseVariableDefinitions\",\n    value: function parseVariableDefinitions() {\n      return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n    }\n    /**\n     * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n     */\n\n  }, {\n    key: \"parseVariableDefinition\",\n    value: function parseVariableDefinition() {\n      return this.node(this._lexer.token, {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: this.parseVariable(),\n        type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n        defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : undefined,\n        directives: this.parseConstDirectives()\n      });\n    }\n    /**\n     * Variable : $ Name\n     */\n\n  }, {\n    key: \"parseVariable\",\n    value: function parseVariable() {\n      var start = this._lexer.token;\n      this.expectToken(TokenKind.DOLLAR);\n      return this.node(start, {\n        kind: Kind.VARIABLE,\n        name: this.parseName()\n      });\n    }\n    /**\n     * ```\n     * SelectionSet : { Selection+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseSelectionSet\",\n    value: function parseSelectionSet() {\n      return this.node(this._lexer.token, {\n        kind: Kind.SELECTION_SET,\n        selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R)\n      });\n    }\n    /**\n     * Selection :\n     *   - Field\n     *   - FragmentSpread\n     *   - InlineFragment\n     */\n\n  }, {\n    key: \"parseSelection\",\n    value: function parseSelection() {\n      return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n    }\n    /**\n     * Field : Alias? Name Arguments? Directives? SelectionSet?\n     *\n     * Alias : Name :\n     */\n\n  }, {\n    key: \"parseField\",\n    value: function parseField() {\n      var start = this._lexer.token;\n      var nameOrAlias = this.parseName();\n      var alias;\n      var name;\n\n      if (this.expectOptionalToken(TokenKind.COLON)) {\n        alias = nameOrAlias;\n        name = this.parseName();\n      } else {\n        name = nameOrAlias;\n      }\n\n      return this.node(start, {\n        kind: Kind.FIELD,\n        alias: alias,\n        name: name,\n        arguments: this.parseArguments(false),\n        directives: this.parseDirectives(false),\n        selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined\n      });\n    }\n    /**\n     * Arguments[Const] : ( Argument[?Const]+ )\n     */\n\n  }, {\n    key: \"parseArguments\",\n    value: function parseArguments(isConst) {\n      var item = isConst ? this.parseConstArgument : this.parseArgument;\n      return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n    }\n    /**\n     * Argument[Const] : Name : Value[?Const]\n     */\n\n  }, {\n    key: \"parseArgument\",\n    value: function parseArgument() {\n      var isConst = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var start = this._lexer.token;\n      var name = this.parseName();\n      this.expectToken(TokenKind.COLON);\n      return this.node(start, {\n        kind: Kind.ARGUMENT,\n        name: name,\n        value: this.parseValueLiteral(isConst)\n      });\n    }\n  }, {\n    key: \"parseConstArgument\",\n    value: function parseConstArgument() {\n      return this.parseArgument(true);\n    } // Implements the parsing rules in the Fragments section.\n\n    /**\n     * Corresponds to both FragmentSpread and InlineFragment in the spec.\n     *\n     * FragmentSpread : ... FragmentName Directives?\n     *\n     * InlineFragment : ... TypeCondition? Directives? SelectionSet\n     */\n\n  }, {\n    key: \"parseFragment\",\n    value: function parseFragment() {\n      var start = this._lexer.token;\n      this.expectToken(TokenKind.SPREAD);\n      var hasTypeCondition = this.expectOptionalKeyword('on');\n\n      if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n        return this.node(start, {\n          kind: Kind.FRAGMENT_SPREAD,\n          name: this.parseFragmentName(),\n          directives: this.parseDirectives(false)\n        });\n      }\n\n      return this.node(start, {\n        kind: Kind.INLINE_FRAGMENT,\n        typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    /**\n     * FragmentDefinition :\n     *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n     *\n     * TypeCondition : NamedType\n     */\n\n  }, {\n    key: \"parseFragmentDefinition\",\n    value: function parseFragmentDefinition() {\n      var start = this._lexer.token;\n      this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n      // the grammar of FragmentDefinition:\n      //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n      if (this._options.allowLegacyFragmentVariables === true) {\n        return this.node(start, {\n          kind: Kind.FRAGMENT_DEFINITION,\n          name: this.parseFragmentName(),\n          variableDefinitions: this.parseVariableDefinitions(),\n          typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n          directives: this.parseDirectives(false),\n          selectionSet: this.parseSelectionSet()\n        });\n      }\n\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    /**\n     * FragmentName : Name but not `on`\n     */\n\n  }, {\n    key: \"parseFragmentName\",\n    value: function parseFragmentName() {\n      if (this._lexer.token.value === 'on') {\n        throw this.unexpected();\n      }\n\n      return this.parseName();\n    } // Implements the parsing rules in the Values section.\n\n    /**\n     * Value[Const] :\n     *   - [~Const] Variable\n     *   - IntValue\n     *   - FloatValue\n     *   - StringValue\n     *   - BooleanValue\n     *   - NullValue\n     *   - EnumValue\n     *   - ListValue[?Const]\n     *   - ObjectValue[?Const]\n     *\n     * BooleanValue : one of `true` `false`\n     *\n     * NullValue : `null`\n     *\n     * EnumValue : Name but not `true`, `false` or `null`\n     */\n\n  }, {\n    key: \"parseValueLiteral\",\n    value: function parseValueLiteral(isConst) {\n      var token = this._lexer.token;\n\n      switch (token.kind) {\n        case TokenKind.BRACKET_L:\n          return this.parseList(isConst);\n\n        case TokenKind.BRACE_L:\n          return this.parseObject(isConst);\n\n        case TokenKind.INT:\n          this.advanceLexer();\n          return this.node(token, {\n            kind: Kind.INT,\n            value: token.value\n          });\n\n        case TokenKind.FLOAT:\n          this.advanceLexer();\n          return this.node(token, {\n            kind: Kind.FLOAT,\n            value: token.value\n          });\n\n        case TokenKind.STRING:\n        case TokenKind.BLOCK_STRING:\n          return this.parseStringLiteral();\n\n        case TokenKind.NAME:\n          this.advanceLexer();\n\n          switch (token.value) {\n            case 'true':\n              return this.node(token, {\n                kind: Kind.BOOLEAN,\n                value: true\n              });\n\n            case 'false':\n              return this.node(token, {\n                kind: Kind.BOOLEAN,\n                value: false\n              });\n\n            case 'null':\n              return this.node(token, {\n                kind: Kind.NULL\n              });\n\n            default:\n              return this.node(token, {\n                kind: Kind.ENUM,\n                value: token.value\n              });\n          }\n\n        case TokenKind.DOLLAR:\n          if (isConst) {\n            this.expectToken(TokenKind.DOLLAR);\n\n            if (this._lexer.token.kind === TokenKind.NAME) {\n              var varName = this._lexer.token.value;\n              throw syntaxError(this._lexer.source, token.start, \"Unexpected variable \\\"$\".concat(varName, \"\\\" in constant value.\"));\n            } else {\n              throw this.unexpected(token);\n            }\n          }\n\n          return this.parseVariable();\n\n        default:\n          throw this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseConstValueLiteral\",\n    value: function parseConstValueLiteral() {\n      return this.parseValueLiteral(true);\n    }\n  }, {\n    key: \"parseStringLiteral\",\n    value: function parseStringLiteral() {\n      var token = this._lexer.token;\n      this.advanceLexer();\n      return this.node(token, {\n        kind: Kind.STRING,\n        value: token.value,\n        block: token.kind === TokenKind.BLOCK_STRING\n      });\n    }\n    /**\n     * ListValue[Const] :\n     *   - [ ]\n     *   - [ Value[?Const]+ ]\n     */\n\n  }, {\n    key: \"parseList\",\n    value: function parseList(isConst) {\n      var _this = this;\n\n      var item = function item() {\n        return _this.parseValueLiteral(isConst);\n      };\n\n      return this.node(this._lexer.token, {\n        kind: Kind.LIST,\n        values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)\n      });\n    }\n    /**\n     * ```\n     * ObjectValue[Const] :\n     *   - { }\n     *   - { ObjectField[?Const]+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseObject\",\n    value: function parseObject(isConst) {\n      var _this2 = this;\n\n      var item = function item() {\n        return _this2.parseObjectField(isConst);\n      };\n\n      return this.node(this._lexer.token, {\n        kind: Kind.OBJECT,\n        fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)\n      });\n    }\n    /**\n     * ObjectField[Const] : Name : Value[?Const]\n     */\n\n  }, {\n    key: \"parseObjectField\",\n    value: function parseObjectField(isConst) {\n      var start = this._lexer.token;\n      var name = this.parseName();\n      this.expectToken(TokenKind.COLON);\n      return this.node(start, {\n        kind: Kind.OBJECT_FIELD,\n        name: name,\n        value: this.parseValueLiteral(isConst)\n      });\n    } // Implements the parsing rules in the Directives section.\n\n    /**\n     * Directives[Const] : Directive[?Const]+\n     */\n\n  }, {\n    key: \"parseDirectives\",\n    value: function parseDirectives(isConst) {\n      var directives = [];\n\n      while (this.peek(TokenKind.AT)) {\n        directives.push(this.parseDirective(isConst));\n      }\n\n      return directives;\n    }\n  }, {\n    key: \"parseConstDirectives\",\n    value: function parseConstDirectives() {\n      return this.parseDirectives(true);\n    }\n    /**\n     * ```\n     * Directive[Const] : @ Name Arguments[?Const]?\n     * ```\n     */\n\n  }, {\n    key: \"parseDirective\",\n    value: function parseDirective(isConst) {\n      var start = this._lexer.token;\n      this.expectToken(TokenKind.AT);\n      return this.node(start, {\n        kind: Kind.DIRECTIVE,\n        name: this.parseName(),\n        arguments: this.parseArguments(isConst)\n      });\n    } // Implements the parsing rules in the Types section.\n\n    /**\n     * Type :\n     *   - NamedType\n     *   - ListType\n     *   - NonNullType\n     */\n\n  }, {\n    key: \"parseTypeReference\",\n    value: function parseTypeReference() {\n      var start = this._lexer.token;\n      var type;\n\n      if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n        var innerType = this.parseTypeReference();\n        this.expectToken(TokenKind.BRACKET_R);\n        type = this.node(start, {\n          kind: Kind.LIST_TYPE,\n          type: innerType\n        });\n      } else {\n        type = this.parseNamedType();\n      }\n\n      if (this.expectOptionalToken(TokenKind.BANG)) {\n        return this.node(start, {\n          kind: Kind.NON_NULL_TYPE,\n          type: type\n        });\n      }\n\n      return type;\n    }\n    /**\n     * NamedType : Name\n     */\n\n  }, {\n    key: \"parseNamedType\",\n    value: function parseNamedType() {\n      return this.node(this._lexer.token, {\n        kind: Kind.NAMED_TYPE,\n        name: this.parseName()\n      });\n    } // Implements the parsing rules in the Type Definition section.\n\n  }, {\n    key: \"peekDescription\",\n    value: function peekDescription() {\n      return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n    }\n    /**\n     * Description : StringValue\n     */\n\n  }, {\n    key: \"parseDescription\",\n    value: function parseDescription() {\n      if (this.peekDescription()) {\n        return this.parseStringLiteral();\n      }\n    }\n    /**\n     * ```\n     * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseSchemaDefinition\",\n    value: function parseSchemaDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('schema');\n      var directives = this.parseConstDirectives();\n      var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n      return this.node(start, {\n        kind: Kind.SCHEMA_DEFINITION,\n        description: description,\n        directives: directives,\n        operationTypes: operationTypes\n      });\n    }\n    /**\n     * OperationTypeDefinition : OperationType : NamedType\n     */\n\n  }, {\n    key: \"parseOperationTypeDefinition\",\n    value: function parseOperationTypeDefinition() {\n      var start = this._lexer.token;\n      var operation = this.parseOperationType();\n      this.expectToken(TokenKind.COLON);\n      var type = this.parseNamedType();\n      return this.node(start, {\n        kind: Kind.OPERATION_TYPE_DEFINITION,\n        operation: operation,\n        type: type\n      });\n    }\n    /**\n     * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n     */\n\n  }, {\n    key: \"parseScalarTypeDefinition\",\n    value: function parseScalarTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('scalar');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.SCALAR_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives\n      });\n    }\n    /**\n     * ObjectTypeDefinition :\n     *   Description?\n     *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n     */\n\n  }, {\n    key: \"parseObjectTypeDefinition\",\n    value: function parseObjectTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('type');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n      return this.node(start, {\n        kind: Kind.OBJECT_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * ImplementsInterfaces :\n     *   - implements `&`? NamedType\n     *   - ImplementsInterfaces & NamedType\n     */\n\n  }, {\n    key: \"parseImplementsInterfaces\",\n    value: function parseImplementsInterfaces() {\n      return this.expectOptionalKeyword('implements') ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];\n    }\n    /**\n     * ```\n     * FieldsDefinition : { FieldDefinition+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseFieldsDefinition\",\n    value: function parseFieldsDefinition() {\n      return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n    }\n    /**\n     * FieldDefinition :\n     *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n     */\n\n  }, {\n    key: \"parseFieldDefinition\",\n    value: function parseFieldDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      var name = this.parseName();\n      var args = this.parseArgumentDefs();\n      this.expectToken(TokenKind.COLON);\n      var type = this.parseTypeReference();\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.FIELD_DEFINITION,\n        description: description,\n        name: name,\n        arguments: args,\n        type: type,\n        directives: directives\n      });\n    }\n    /**\n     * ArgumentsDefinition : ( InputValueDefinition+ )\n     */\n\n  }, {\n    key: \"parseArgumentDefs\",\n    value: function parseArgumentDefs() {\n      return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n    }\n    /**\n     * InputValueDefinition :\n     *   - Description? Name : Type DefaultValue? Directives[Const]?\n     */\n\n  }, {\n    key: \"parseInputValueDef\",\n    value: function parseInputValueDef() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      var name = this.parseName();\n      this.expectToken(TokenKind.COLON);\n      var type = this.parseTypeReference();\n      var defaultValue;\n\n      if (this.expectOptionalToken(TokenKind.EQUALS)) {\n        defaultValue = this.parseConstValueLiteral();\n      }\n\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        description: description,\n        name: name,\n        type: type,\n        defaultValue: defaultValue,\n        directives: directives\n      });\n    }\n    /**\n     * InterfaceTypeDefinition :\n     *   - Description? interface Name Directives[Const]? FieldsDefinition?\n     */\n\n  }, {\n    key: \"parseInterfaceTypeDefinition\",\n    value: function parseInterfaceTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('interface');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n      return this.node(start, {\n        kind: Kind.INTERFACE_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * UnionTypeDefinition :\n     *   - Description? union Name Directives[Const]? UnionMemberTypes?\n     */\n\n  }, {\n    key: \"parseUnionTypeDefinition\",\n    value: function parseUnionTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('union');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var types = this.parseUnionMemberTypes();\n      return this.node(start, {\n        kind: Kind.UNION_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives,\n        types: types\n      });\n    }\n    /**\n     * UnionMemberTypes :\n     *   - = `|`? NamedType\n     *   - UnionMemberTypes | NamedType\n     */\n\n  }, {\n    key: \"parseUnionMemberTypes\",\n    value: function parseUnionMemberTypes() {\n      return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n    }\n    /**\n     * EnumTypeDefinition :\n     *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n     */\n\n  }, {\n    key: \"parseEnumTypeDefinition\",\n    value: function parseEnumTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('enum');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var values = this.parseEnumValuesDefinition();\n      return this.node(start, {\n        kind: Kind.ENUM_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives,\n        values: values\n      });\n    }\n    /**\n     * ```\n     * EnumValuesDefinition : { EnumValueDefinition+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseEnumValuesDefinition\",\n    value: function parseEnumValuesDefinition() {\n      return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n    }\n    /**\n     * EnumValueDefinition : Description? EnumValue Directives[Const]?\n     */\n\n  }, {\n    key: \"parseEnumValueDefinition\",\n    value: function parseEnumValueDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      var name = this.parseEnumValueName();\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives\n      });\n    }\n    /**\n     * EnumValue : Name but not `true`, `false` or `null`\n     */\n\n  }, {\n    key: \"parseEnumValueName\",\n    value: function parseEnumValueName() {\n      if (this._lexer.token.value === 'true' || this._lexer.token.value === 'false' || this._lexer.token.value === 'null') {\n        throw syntaxError(this._lexer.source, this._lexer.token.start, \"\".concat(getTokenDesc(this._lexer.token), \" is reserved and cannot be used for an enum value.\"));\n      }\n\n      return this.parseName();\n    }\n    /**\n     * InputObjectTypeDefinition :\n     *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n     */\n\n  }, {\n    key: \"parseInputObjectTypeDefinition\",\n    value: function parseInputObjectTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('input');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseInputFieldsDefinition();\n      return this.node(start, {\n        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * ```\n     * InputFieldsDefinition : { InputValueDefinition+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseInputFieldsDefinition\",\n    value: function parseInputFieldsDefinition() {\n      return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n    }\n    /**\n     * TypeSystemExtension :\n     *   - SchemaExtension\n     *   - TypeExtension\n     *\n     * TypeExtension :\n     *   - ScalarTypeExtension\n     *   - ObjectTypeExtension\n     *   - InterfaceTypeExtension\n     *   - UnionTypeExtension\n     *   - EnumTypeExtension\n     *   - InputObjectTypeDefinition\n     */\n\n  }, {\n    key: \"parseTypeSystemExtension\",\n    value: function parseTypeSystemExtension() {\n      var keywordToken = this._lexer.lookahead();\n\n      if (keywordToken.kind === TokenKind.NAME) {\n        switch (keywordToken.value) {\n          case 'schema':\n            return this.parseSchemaExtension();\n\n          case 'scalar':\n            return this.parseScalarTypeExtension();\n\n          case 'type':\n            return this.parseObjectTypeExtension();\n\n          case 'interface':\n            return this.parseInterfaceTypeExtension();\n\n          case 'union':\n            return this.parseUnionTypeExtension();\n\n          case 'enum':\n            return this.parseEnumTypeExtension();\n\n          case 'input':\n            return this.parseInputObjectTypeExtension();\n        }\n      }\n\n      throw this.unexpected(keywordToken);\n    }\n    /**\n     * ```\n     * SchemaExtension :\n     *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n     *  - extend schema Directives[Const]\n     * ```\n     */\n\n  }, {\n    key: \"parseSchemaExtension\",\n    value: function parseSchemaExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('schema');\n      var directives = this.parseConstDirectives();\n      var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n      if (directives.length === 0 && operationTypes.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.SCHEMA_EXTENSION,\n        directives: directives,\n        operationTypes: operationTypes\n      });\n    }\n    /**\n     * ScalarTypeExtension :\n     *   - extend scalar Name Directives[Const]\n     */\n\n  }, {\n    key: \"parseScalarTypeExtension\",\n    value: function parseScalarTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('scalar');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n\n      if (directives.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.SCALAR_TYPE_EXTENSION,\n        name: name,\n        directives: directives\n      });\n    }\n    /**\n     * ObjectTypeExtension :\n     *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n     *  - extend type Name ImplementsInterfaces? Directives[Const]\n     *  - extend type Name ImplementsInterfaces\n     */\n\n  }, {\n    key: \"parseObjectTypeExtension\",\n    value: function parseObjectTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('type');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n\n      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.OBJECT_TYPE_EXTENSION,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * InterfaceTypeExtension :\n     *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n     *  - extend interface Name ImplementsInterfaces? Directives[Const]\n     *  - extend interface Name ImplementsInterfaces\n     */\n\n  }, {\n    key: \"parseInterfaceTypeExtension\",\n    value: function parseInterfaceTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('interface');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n\n      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.INTERFACE_TYPE_EXTENSION,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * UnionTypeExtension :\n     *   - extend union Name Directives[Const]? UnionMemberTypes\n     *   - extend union Name Directives[Const]\n     */\n\n  }, {\n    key: \"parseUnionTypeExtension\",\n    value: function parseUnionTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('union');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var types = this.parseUnionMemberTypes();\n\n      if (directives.length === 0 && types.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.UNION_TYPE_EXTENSION,\n        name: name,\n        directives: directives,\n        types: types\n      });\n    }\n    /**\n     * EnumTypeExtension :\n     *   - extend enum Name Directives[Const]? EnumValuesDefinition\n     *   - extend enum Name Directives[Const]\n     */\n\n  }, {\n    key: \"parseEnumTypeExtension\",\n    value: function parseEnumTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('enum');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var values = this.parseEnumValuesDefinition();\n\n      if (directives.length === 0 && values.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.ENUM_TYPE_EXTENSION,\n        name: name,\n        directives: directives,\n        values: values\n      });\n    }\n    /**\n     * InputObjectTypeExtension :\n     *   - extend input Name Directives[Const]? InputFieldsDefinition\n     *   - extend input Name Directives[Const]\n     */\n\n  }, {\n    key: \"parseInputObjectTypeExtension\",\n    value: function parseInputObjectTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('input');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseInputFieldsDefinition();\n\n      if (directives.length === 0 && fields.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n        name: name,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * ```\n     * DirectiveDefinition :\n     *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n     * ```\n     */\n\n  }, {\n    key: \"parseDirectiveDefinition\",\n    value: function parseDirectiveDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('directive');\n      this.expectToken(TokenKind.AT);\n      var name = this.parseName();\n      var args = this.parseArgumentDefs();\n      var repeatable = this.expectOptionalKeyword('repeatable');\n      this.expectKeyword('on');\n      var locations = this.parseDirectiveLocations();\n      return this.node(start, {\n        kind: Kind.DIRECTIVE_DEFINITION,\n        description: description,\n        name: name,\n        arguments: args,\n        repeatable: repeatable,\n        locations: locations\n      });\n    }\n    /**\n     * DirectiveLocations :\n     *   - `|`? DirectiveLocation\n     *   - DirectiveLocations | DirectiveLocation\n     */\n\n  }, {\n    key: \"parseDirectiveLocations\",\n    value: function parseDirectiveLocations() {\n      return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n    }\n    /*\n     * DirectiveLocation :\n     *   - ExecutableDirectiveLocation\n     *   - TypeSystemDirectiveLocation\n     *\n     * ExecutableDirectiveLocation : one of\n     *   `QUERY`\n     *   `MUTATION`\n     *   `SUBSCRIPTION`\n     *   `FIELD`\n     *   `FRAGMENT_DEFINITION`\n     *   `FRAGMENT_SPREAD`\n     *   `INLINE_FRAGMENT`\n     *\n     * TypeSystemDirectiveLocation : one of\n     *   `SCHEMA`\n     *   `SCALAR`\n     *   `OBJECT`\n     *   `FIELD_DEFINITION`\n     *   `ARGUMENT_DEFINITION`\n     *   `INTERFACE`\n     *   `UNION`\n     *   `ENUM`\n     *   `ENUM_VALUE`\n     *   `INPUT_OBJECT`\n     *   `INPUT_FIELD_DEFINITION`\n     */\n\n  }, {\n    key: \"parseDirectiveLocation\",\n    value: function parseDirectiveLocation() {\n      var start = this._lexer.token;\n      var name = this.parseName();\n\n      if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n        return name;\n      }\n\n      throw this.unexpected(start);\n    } // Core parsing utility functions\n\n    /**\n     * Returns a node that, if configured to do so, sets a \"loc\" field as a\n     * location object, used to identify the place in the source that created a\n     * given parsed object.\n     */\n\n  }, {\n    key: \"node\",\n    value: function node(startToken, _node) {\n      if (this._options.noLocation !== true) {\n        _node.loc = new Location(startToken, this._lexer.lastToken, this._lexer.source);\n      }\n\n      return _node;\n    }\n    /**\n     * Determines if the next token is of a given kind\n     */\n\n  }, {\n    key: \"peek\",\n    value: function peek(kind) {\n      return this._lexer.token.kind === kind;\n    }\n    /**\n     * If the next token is of the given kind, return that token after advancing the lexer.\n     * Otherwise, do not change the parser state and throw an error.\n     */\n\n  }, {\n    key: \"expectToken\",\n    value: function expectToken(kind) {\n      var token = this._lexer.token;\n\n      if (token.kind === kind) {\n        this.advanceLexer();\n        return token;\n      }\n\n      throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n    }\n    /**\n     * If the next token is of the given kind, return \"true\" after advancing the lexer.\n     * Otherwise, do not change the parser state and return \"false\".\n     */\n\n  }, {\n    key: \"expectOptionalToken\",\n    value: function expectOptionalToken(kind) {\n      var token = this._lexer.token;\n\n      if (token.kind === kind) {\n        this.advanceLexer();\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * If the next token is a given keyword, advance the lexer.\n     * Otherwise, do not change the parser state and throw an error.\n     */\n\n  }, {\n    key: \"expectKeyword\",\n    value: function expectKeyword(value) {\n      var token = this._lexer.token;\n\n      if (token.kind === TokenKind.NAME && token.value === value) {\n        this.advanceLexer();\n      } else {\n        throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n      }\n    }\n    /**\n     * If the next token is a given keyword, return \"true\" after advancing the lexer.\n     * Otherwise, do not change the parser state and return \"false\".\n     */\n\n  }, {\n    key: \"expectOptionalKeyword\",\n    value: function expectOptionalKeyword(value) {\n      var token = this._lexer.token;\n\n      if (token.kind === TokenKind.NAME && token.value === value) {\n        this.advanceLexer();\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Helper function for creating an error when an unexpected lexed token is encountered.\n     */\n\n  }, {\n    key: \"unexpected\",\n    value: function unexpected(atToken) {\n      var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n      return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n    }\n    /**\n     * Returns a possibly empty list of parse nodes, determined by the parseFn.\n     * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n     * Advances the parser to the next lex token after the closing token.\n     */\n\n  }, {\n    key: \"any\",\n    value: function any(openKind, parseFn, closeKind) {\n      this.expectToken(openKind);\n      var nodes = [];\n\n      while (!this.expectOptionalToken(closeKind)) {\n        nodes.push(parseFn.call(this));\n      }\n\n      return nodes;\n    }\n    /**\n     * Returns a list of parse nodes, determined by the parseFn.\n     * It can be empty only if open token is missing otherwise it will always return non-empty list\n     * that begins with a lex token of openKind and ends with a lex token of closeKind.\n     * Advances the parser to the next lex token after the closing token.\n     */\n\n  }, {\n    key: \"optionalMany\",\n    value: function optionalMany(openKind, parseFn, closeKind) {\n      if (this.expectOptionalToken(openKind)) {\n        var nodes = [];\n\n        do {\n          nodes.push(parseFn.call(this));\n        } while (!this.expectOptionalToken(closeKind));\n\n        return nodes;\n      }\n\n      return [];\n    }\n    /**\n     * Returns a non-empty list of parse nodes, determined by the parseFn.\n     * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n     * Advances the parser to the next lex token after the closing token.\n     */\n\n  }, {\n    key: \"many\",\n    value: function many(openKind, parseFn, closeKind) {\n      this.expectToken(openKind);\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n    /**\n     * Returns a non-empty list of parse nodes, determined by the parseFn.\n     * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n     * Advances the parser to the next lex token after last item in the list.\n     */\n\n  }, {\n    key: \"delimitedMany\",\n    value: function delimitedMany(delimiterKind, parseFn) {\n      this.expectOptionalToken(delimiterKind);\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (this.expectOptionalToken(delimiterKind));\n\n      return nodes;\n    }\n  }, {\n    key: \"advanceLexer\",\n    value: function advanceLexer() {\n      var maxTokens = this._options.maxTokens;\n\n      var token = this._lexer.advance();\n\n      if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n        ++this._tokenCounter;\n\n        if (this._tokenCounter > maxTokens) {\n          throw syntaxError(this._lexer.source, token.start, \"Document contains more that \".concat(maxTokens, \" tokens. Parsing aborted.\"));\n        }\n      }\n    }\n  }]);\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}","map":{"version":3,"sources":["/Users/bethanyjennings/Desktop/projects_backup/MERN-Book-Search-Engine/Develop/client/node_modules/graphql/language/parser.mjs"],"names":["syntaxError","Location","OperationTypeNode","DirectiveLocation","Kind","isPunctuatorTokenKind","Lexer","isSource","Source","TokenKind","parse","source","options","parser","Parser","parseDocument","parseValue","expectToken","SOF","value","parseValueLiteral","EOF","parseConstValue","parseConstValueLiteral","parseType","type","parseTypeReference","sourceObj","_lexer","_options","_tokenCounter","token","NAME","node","kind","DOCUMENT","definitions","many","parseDefinition","peek","BRACE_L","parseOperationDefinition","hasDescription","peekDescription","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","start","parseFragmentDefinition","parseTypeSystemExtension","unexpected","OPERATION_DEFINITION","operation","QUERY","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseName","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","PAREN_L","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","expectOptionalToken","EQUALS","parseConstDirectives","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","expectKeyword","allowLegacyFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","advanceLexer","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","varName","block","LIST","values","any","BRACKET_R","parseObjectField","OBJECT","fields","OBJECT_FIELD","AT","push","parseDirective","DIRECTIVE","innerType","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","description","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","delimitedMany","AMP","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","types","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","parseEnumValueName","ENUM_VALUE_DEFINITION","getTokenDesc","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","Object","prototype","hasOwnProperty","call","startToken","noLocation","loc","lastToken","getTokenKindDesc","atToken","openKind","parseFn","closeKind","nodes","delimiterKind","maxTokens","advance"],"mappings":"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","sourcesContent":["import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n"]},"metadata":{},"sourceType":"module"}